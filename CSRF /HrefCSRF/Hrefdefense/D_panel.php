<?php
@session_start();
$csrf = $_SESSION['i_csrf_token'] ?? ($_SESSION['csrf_token'] ?? '');
?>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>GET CSRF Demo — Href Attack Panel</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    :root{
      --blue:#2563eb; --blue-d:#1d4ed8;
      --bg:#f4f6fa; --card:#fff; --border:#e5e7eb; --muted:#64748b; --ink:#0f172a;
      --ok:#16a34a; --bad:#b91c1c;
    }
    *{box-sizing:border-box}
    body{font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Arial,sans-serif;margin:0;padding:30px;background:var(--bg);color:var(--ink);text-align:center}
    h1{margin:0 0 16px}
    .topbar{display:flex;gap:12px;justify-content:center;align-items:center;margin-bottom:18px}
    .btn{padding:8px 12px;border:1px solid var(--border);background:#f8fafc;border-radius:8px;cursor:pointer}
    .btn:active{transform:translateY(1px)}
    .btn-primary{background:var(--blue);color:#fff;border-color:var(--blue-d);font-weight:600}
    .badge{padding:4px 10px;border:1px solid var(--border);border-radius:999px;background:#fff;font-weight:600}
    .s-ok{color:var(--ok)} .s-bad{color:var(--bad)}
    .container{display:flex;gap:30px;justify-content:center;align-items:flex-start}
    .panel{border:1px solid var(--border);background:var(--card);padding:10px;width:600px;height:600px;border-radius:12px;display:flex;flex-direction:column}
    .panel h2{margin:0 0 8px;font-size:18px}
    .frameWrap{flex:1;min-height:0;overflow:auto}
    .frameWrap>iframe{width:100%;height:100%;border:none;border-radius:6px;background:#fff}
    .reload-btn{margin-top:10px}

    .teach{max-width:1230px;margin:20px auto 0;display:flex;flex-direction:column;gap:14px;text-align:left}
    .teachbox{border:1px solid var(--border);border-radius:10px;background:#fff;overflow:hidden}
    .teachbox>summary{padding:12px 14px;list-style:none;font-weight:700;cursor:pointer;background:#f8fafc;border-bottom:1px solid var(--border)}
    .teachbox>summary::-webkit-details-marker{display:none}
    .teachbox[open]>summary{background:#eef2ff}
    .teachbox .box{padding:12px 14px}
    code,pre{background:#0f172a;color:#e5e7eb;border-radius:8px;padding:10px;display:block;overflow:auto}
    .muted{color:#64748b;font-size:13px}
  </style>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/intro.js/minified/introjs.min.css">
  <script src="https://cdn.jsdelivr.net/npm/intro.js/minified/intro.min.js"></script>
</head>
<body>
  <h1>GET CSRF Demo — Href Attack(Defense)</h1>

  <div class="topbar">
    <button class="btn" onclick="doReset()">Reset Demo</button>
    <button class="btn btn-primary" onclick="startGuide()">Start Guide</button>
    <span class="badge">Status: <span id="statusText" class="s-ok">Idle</span></span>
  </div>

  <div class="container">
    <div class="panel" id="victimPanel">
      <h2>Profile (Victim)</h2>
      <div class="frameWrap">
        <iframe id="victimFrame" name="victimFrame" src="D_profile.php?step=1" title="Victim Profile"></iframe>
      </div>
      <button class="reload-btn btn" onclick="reloadVictim()">Reload Victim</button>
    </div>

    <div class="panel" id="attackerPanel">
      <h2>Attacker</h2>
      <div class="frameWrap">
        <iframe id="attackerFrame" src="D_attacker.html" title="Attacker Page"></iframe>
      </div>
      <button class="reload-btn btn" onclick="reloadAttacker()">Reload Attacker</button>
    </div>
  </div>

  <!-- Teaching area -->
  <div class="teach" id="teachSection">
  <details class="teachbox">
    <summary>What just happened?</summary>
    <div class="box">
      <p>
        You clicked the attacker’s link that looked like a normal “View more photos” button.  
        Behind the scenes, the link told your browser to call the site’s hidden <b>follow</b> function.  
        Since you were already logged in, your <b>session cookie</b> was automatically sent along.
      </p>
      <p>
        Without defenses, this would have silently made your account follow the attacker.  
        But here, the <b>secure server</b> checked the request and saw it was missing a valid
        CSRF token and came from an outside page. Instead of changing your account, the
        server replied with a <b>blocked</b> message.
      </p>
      <p class="muted">
        In short: the attack was attempted, but the defense rejected it — your account
        remained <b>unchanged</b>.
      </p>
    </div>
  </details>

  <details class="teachbox">
    <summary>Why did the defense succeed?</summary>
    <div class="box">
      <ul class="muted" style="margin:0 0 0 18px">
        <li><b>State-changing actions</b> (like “follow”) are only allowed via <b>POST</b> requests.</li>
        <li>Every POST must include a secret <b>CSRF token</b>, generated by the server. Attackers can’t guess or steal it with just a link.</li>
        <li>The server can also check the <b>Origin/Referer</b> headers to confirm the request really came from this site.</li>
      </ul>
      <p class="muted" style="margin-top:10px">
        Because the attacker’s link was a plain GET without a token, it failed all these checks.
        The server blocked it and your profile did not change.
      </p>
    </div>
  </details>

  <details class="teachbox">
    <summary>Check the current CSRF Token</summary>
    <div class="box">
      <pre><code id="csrfBox"><?= htmlspecialchars($csrf ?: '(no token yet — open the left panel and login first)', ENT_QUOTES, 'UTF-8') ?></code></pre>
      <p class="muted" style="margin-top:8px">
        This is the random CSRF token currently stored in your session.  
        Real forms include this hidden value, and the server rejects requests if the token doesn’t match.
      </p>
    </div>
  </details>

  <details class="teachbox">
  <summary>View key defense code (token &amp; origin validation)</summary>
  <div class="box">
<pre><code>// 1. Only POST is allowed for actions that change state
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
  http_response_code(405);
  exit('POST only');
}

// 2. Verify CSRF token matches the session (timing-safe compare)
$token      = $_POST['csrf_token'] ?? '';
$sessionTok = $_SESSION['i_csrf_token'] ?? '';

if (empty($token) || empty($sessionTok) || !hash_equals((string)$sessionTok, (string)$token)) {
  http_response_code(403);
  exit('CSRF token invalid or missing.');
}

// 3. (Optional) Confirm request came from this site (defense-in-depth)
$host   = $_SERVER['HTTP_HOST']    ?? '';
$origin = $_SERVER['HTTP_ORIGIN']  ?? '';
$refer  = $_SERVER['HTTP_REFERER'] ?? '';
$ok = ($origin && strpos($origin, $host) === 0)
   || ($refer  && strpos($refer,  $host) === 0);

if (!$ok) {
  http_response_code(403);
  exit('Bad origin (optional check)');
}

// proceed with the intended state change...
</code></pre>
    <p class="muted" style="margin-top:8px">
      This defense code enforces POST-only, checks the CSRF token with a timing-safe comparison,
      and optionally verifies the request origin. CSRF tokens are the primary defense; Origin/Referer
      checks serve as an additional safeguard.
    </p>
  </div>
</details>

  <details class="teachbox">
    <summary>View attacker code</summary>
    <div class="box">
<pre><code>&lt;a href="D_follower.php?user=attacker" target="_self"&gt;View more photos&lt;/a&gt;</code></pre>
      <p class="muted" style="margin-top:8px">
        This looks like a harmless link, but it secretly calls the “follow” function with the attacker’s username.  
        Because it uses GET, your browser would normally include your login cookie automatically.  
        With no defenses, your account would follow the attacker instantly — without your consent.
      </p>
    </div>
  </details>
</div>

<script>
  const victimFrame   = document.getElementById('victimFrame');
  const attackerFrame = document.getElementById('attackerFrame');
  const statusEl      = document.getElementById('statusText');
  const csrfBox       = document.getElementById('csrfBox');

  function setStatusIdle(){ statusEl.textContent='Idle'; statusEl.classList.remove('s-bad'); statusEl.classList.add('s-ok'); }
  function setStatusProtected(){ statusEl.textContent='Protected'; statusEl.classList.remove('s-bad'); statusEl.classList.add('s-ok'); }

  function reloadVictim(){
    const u=new URL('D_profile.php?step=1', location.href);
    u.searchParams.set('_v', Date.now());
    victimFrame.src = u.toString();
  }
  function reloadAttacker(){
    const u=new URL('D_attacker.html', location.href);
    u.searchParams.set('_v', Date.now());
    attackerFrame.src = u.toString();
  }

  // 关键改动：让左侧 iframe 直接“导航到 reset”，由服务器重置并 302 回干净页
  async function doReset(){
    setStatusIdle();
    // 1) 让 Victim iframe 导航到 reset（服务端清 Session -> 302 到干净页）
    victimFrame.src = 'D_profile.php?reset=1&redirect=1&_v=' + Date.now();
    // 2) 攻击面板也刷新
    reloadAttacker();
    // 3) 稍后拉一次 token（用户已登录时可见）
    setTimeout(refreshToken, 500);
  }

  async function refreshToken(){
    try{
      const r = await fetch('D_profile.php?state=1', {cache:'no-store'});
      if(!r.ok) return;
      const j = await r.json();
      const t = (j && (j.token || j.csrf || j.csrf_token)) || '';
      if (t) csrfBox.textContent = t;
    }catch(e){}
  }
  document.addEventListener('DOMContentLoaded', refreshToken);

  // 攻击结果联动
  window.addEventListener('message', (e)=>{
    const d = e.data || {};
    if (d.type === 'ATTACK_LINK_CLICKED') {
      statusEl.textContent = 'Attacking…';
      statusEl.classList.remove('s-ok','s-bad');
    }
    if (d.type === 'ATTACK_RESULT' && d.result === 'blocked') {
      setStatusProtected();
      try { victimFrame.contentWindow.postMessage({ type:'ATTACK_BLOCKED' }, '*'); } catch(_){}
    }
  }, false);

  function startGuide(){
    introJs().setOptions({
      nextLabel:'Next', prevLabel:'Back', doneLabel:'Done',
      exitOnOverlayClick:false, scrollToElement:true,
      steps:[
        { element:'#victimPanel',   intro:'Step 1: Sign in on the left (if needed).' },
        { element:'#attackerPanel', intro:'Step 2: Click the link on the right (state-changing GET).' },
        { element:'#victimPanel',   intro:'Step 3: Request is rejected; status stays safe.' },
        // 新增第 4 步：高亮教学区域
        { element:'#teachSection',  intro:'Step 4: After the demo, check this teaching section for clear explanations below.' }
      ]
    }).start();
  }

  setStatusIdle();
</script>
</body>
</html>
